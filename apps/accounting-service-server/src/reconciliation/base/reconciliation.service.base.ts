/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Reconciliation as PrismaReconciliation } from "@prisma/client";

export class ReconciliationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReconciliationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.reconciliation.count(args);
  }

  async reconciliations(
    args: Prisma.ReconciliationFindManyArgs
  ): Promise<PrismaReconciliation[]> {
    return this.prisma.reconciliation.findMany(args);
  }
  async reconciliation(
    args: Prisma.ReconciliationFindUniqueArgs
  ): Promise<PrismaReconciliation | null> {
    return this.prisma.reconciliation.findUnique(args);
  }
  async createReconciliation(
    args: Prisma.ReconciliationCreateArgs
  ): Promise<PrismaReconciliation> {
    return this.prisma.reconciliation.create(args);
  }
  async updateReconciliation(
    args: Prisma.ReconciliationUpdateArgs
  ): Promise<PrismaReconciliation> {
    return this.prisma.reconciliation.update(args);
  }
  async deleteReconciliation(
    args: Prisma.ReconciliationDeleteArgs
  ): Promise<PrismaReconciliation> {
    return this.prisma.reconciliation.delete(args);
  }
}
