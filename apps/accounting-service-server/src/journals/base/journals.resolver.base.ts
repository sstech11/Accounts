/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Journals } from "./Journals";
import { JournalsCountArgs } from "./JournalsCountArgs";
import { JournalsFindManyArgs } from "./JournalsFindManyArgs";
import { JournalsFindUniqueArgs } from "./JournalsFindUniqueArgs";
import { CreateJournalsArgs } from "./CreateJournalsArgs";
import { UpdateJournalsArgs } from "./UpdateJournalsArgs";
import { DeleteJournalsArgs } from "./DeleteJournalsArgs";
import { JournalsService } from "../journals.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Journals)
export class JournalsResolverBase {
  constructor(
    protected readonly service: JournalsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Journals",
    action: "read",
    possession: "any",
  })
  async _journalsItemsMeta(
    @graphql.Args() args: JournalsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Journals])
  @nestAccessControl.UseRoles({
    resource: "Journals",
    action: "read",
    possession: "any",
  })
  async journalsItems(
    @graphql.Args() args: JournalsFindManyArgs
  ): Promise<Journals[]> {
    return this.service.journalsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Journals, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Journals",
    action: "read",
    possession: "own",
  })
  async journals(
    @graphql.Args() args: JournalsFindUniqueArgs
  ): Promise<Journals | null> {
    const result = await this.service.journals(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Journals)
  @nestAccessControl.UseRoles({
    resource: "Journals",
    action: "create",
    possession: "any",
  })
  async createJournals(
    @graphql.Args() args: CreateJournalsArgs
  ): Promise<Journals> {
    return await this.service.createJournals({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Journals)
  @nestAccessControl.UseRoles({
    resource: "Journals",
    action: "update",
    possession: "any",
  })
  async updateJournals(
    @graphql.Args() args: UpdateJournalsArgs
  ): Promise<Journals | null> {
    try {
      return await this.service.updateJournals({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Journals)
  @nestAccessControl.UseRoles({
    resource: "Journals",
    action: "delete",
    possession: "any",
  })
  async deleteJournals(
    @graphql.Args() args: DeleteJournalsArgs
  ): Promise<Journals | null> {
    try {
      return await this.service.deleteJournals(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
