/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ArApInvoices as PrismaArApInvoices } from "@prisma/client";

export class ArApInvoicesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ArApInvoicesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.arApInvoices.count(args);
  }

  async arApInvoicesItems(
    args: Prisma.ArApInvoicesFindManyArgs
  ): Promise<PrismaArApInvoices[]> {
    return this.prisma.arApInvoices.findMany(args);
  }
  async arApInvoices(
    args: Prisma.ArApInvoicesFindUniqueArgs
  ): Promise<PrismaArApInvoices | null> {
    return this.prisma.arApInvoices.findUnique(args);
  }
  async createArApInvoices(
    args: Prisma.ArApInvoicesCreateArgs
  ): Promise<PrismaArApInvoices> {
    return this.prisma.arApInvoices.create(args);
  }
  async updateArApInvoices(
    args: Prisma.ArApInvoicesUpdateArgs
  ): Promise<PrismaArApInvoices> {
    return this.prisma.arApInvoices.update(args);
  }
  async deleteArApInvoices(
    args: Prisma.ArApInvoicesDeleteArgs
  ): Promise<PrismaArApInvoices> {
    return this.prisma.arApInvoices.delete(args);
  }
}
