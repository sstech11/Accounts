/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ArApInvoices } from "./ArApInvoices";
import { ArApInvoicesCountArgs } from "./ArApInvoicesCountArgs";
import { ArApInvoicesFindManyArgs } from "./ArApInvoicesFindManyArgs";
import { ArApInvoicesFindUniqueArgs } from "./ArApInvoicesFindUniqueArgs";
import { CreateArApInvoicesArgs } from "./CreateArApInvoicesArgs";
import { UpdateArApInvoicesArgs } from "./UpdateArApInvoicesArgs";
import { DeleteArApInvoicesArgs } from "./DeleteArApInvoicesArgs";
import { ArApInvoicesService } from "../arApInvoices.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ArApInvoices)
export class ArApInvoicesResolverBase {
  constructor(
    protected readonly service: ArApInvoicesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ArApInvoices",
    action: "read",
    possession: "any",
  })
  async _arApInvoicesItemsMeta(
    @graphql.Args() args: ArApInvoicesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ArApInvoices])
  @nestAccessControl.UseRoles({
    resource: "ArApInvoices",
    action: "read",
    possession: "any",
  })
  async arApInvoicesItems(
    @graphql.Args() args: ArApInvoicesFindManyArgs
  ): Promise<ArApInvoices[]> {
    return this.service.arApInvoicesItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ArApInvoices, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ArApInvoices",
    action: "read",
    possession: "own",
  })
  async arApInvoices(
    @graphql.Args() args: ArApInvoicesFindUniqueArgs
  ): Promise<ArApInvoices | null> {
    const result = await this.service.arApInvoices(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ArApInvoices)
  @nestAccessControl.UseRoles({
    resource: "ArApInvoices",
    action: "create",
    possession: "any",
  })
  async createArApInvoices(
    @graphql.Args() args: CreateArApInvoicesArgs
  ): Promise<ArApInvoices> {
    return await this.service.createArApInvoices({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ArApInvoices)
  @nestAccessControl.UseRoles({
    resource: "ArApInvoices",
    action: "update",
    possession: "any",
  })
  async updateArApInvoices(
    @graphql.Args() args: UpdateArApInvoicesArgs
  ): Promise<ArApInvoices | null> {
    try {
      return await this.service.updateArApInvoices({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ArApInvoices)
  @nestAccessControl.UseRoles({
    resource: "ArApInvoices",
    action: "delete",
    possession: "any",
  })
  async deleteArApInvoices(
    @graphql.Args() args: DeleteArApInvoicesArgs
  ): Promise<ArApInvoices | null> {
    try {
      return await this.service.deleteArApInvoices(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
