/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ProfitAndLoss } from "./ProfitAndLoss";
import { ProfitAndLossCountArgs } from "./ProfitAndLossCountArgs";
import { ProfitAndLossFindManyArgs } from "./ProfitAndLossFindManyArgs";
import { ProfitAndLossFindUniqueArgs } from "./ProfitAndLossFindUniqueArgs";
import { CreateProfitAndLossArgs } from "./CreateProfitAndLossArgs";
import { UpdateProfitAndLossArgs } from "./UpdateProfitAndLossArgs";
import { DeleteProfitAndLossArgs } from "./DeleteProfitAndLossArgs";
import { ProfitAndLossService } from "../profitAndLoss.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProfitAndLoss)
export class ProfitAndLossResolverBase {
  constructor(
    protected readonly service: ProfitAndLossService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProfitAndLoss",
    action: "read",
    possession: "any",
  })
  async _profitAndLossesMeta(
    @graphql.Args() args: ProfitAndLossCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProfitAndLoss])
  @nestAccessControl.UseRoles({
    resource: "ProfitAndLoss",
    action: "read",
    possession: "any",
  })
  async profitAndLosses(
    @graphql.Args() args: ProfitAndLossFindManyArgs
  ): Promise<ProfitAndLoss[]> {
    return this.service.profitAndLosses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProfitAndLoss, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProfitAndLoss",
    action: "read",
    possession: "own",
  })
  async profitAndLoss(
    @graphql.Args() args: ProfitAndLossFindUniqueArgs
  ): Promise<ProfitAndLoss | null> {
    const result = await this.service.profitAndLoss(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProfitAndLoss)
  @nestAccessControl.UseRoles({
    resource: "ProfitAndLoss",
    action: "create",
    possession: "any",
  })
  async createProfitAndLoss(
    @graphql.Args() args: CreateProfitAndLossArgs
  ): Promise<ProfitAndLoss> {
    return await this.service.createProfitAndLoss({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProfitAndLoss)
  @nestAccessControl.UseRoles({
    resource: "ProfitAndLoss",
    action: "update",
    possession: "any",
  })
  async updateProfitAndLoss(
    @graphql.Args() args: UpdateProfitAndLossArgs
  ): Promise<ProfitAndLoss | null> {
    try {
      return await this.service.updateProfitAndLoss({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProfitAndLoss)
  @nestAccessControl.UseRoles({
    resource: "ProfitAndLoss",
    action: "delete",
    possession: "any",
  })
  async deleteProfitAndLoss(
    @graphql.Args() args: DeleteProfitAndLossArgs
  ): Promise<ProfitAndLoss | null> {
    try {
      return await this.service.deleteProfitAndLoss(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
